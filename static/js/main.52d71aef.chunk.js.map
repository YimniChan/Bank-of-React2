{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Debits.js","components/Credits.js","App.js","serviceWorker.js","index.js"],"names":["AccountBalance","this","props","accountBalance","Component","Home","src","alt","className","to","UserProfile","userName","memberSince","Login","handleChange","e","updatedUser","state","user","inputField","target","name","inputValue","value","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","onSubmit","htmlFor","type","onChange","Debits","handleInput","newRecordName","newRecordValue","newDebit","newCredit","amount","Number","addDebit","addDebitInfo","debitData","debits","id","description","date","display","debitArray","map","debitInfo","debitAmount","onClick","Credits","addCredit","addCreditInfo","creditArray","creditInfo","creditAmount","App","logInInfo","newUser","currentUser","debit","Math","random","toString","slice","Date","toISOString","newDebitA","total","debitMoney","toFixed","credit","newCreditA","creditMoney","axios","get","then","response","data","console","log","key","catch","err","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.52d71aef.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass AccountBalance extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          Balance: ${this.props.accountBalance}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AccountBalance;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport AccountBalance from './AccountBalance';\r\nimport \"./Home.css\";\r\n    \r\nclass Home extends Component {\r\n\r\n    render() {\r\n    return (\r\n        <div>\r\n            <div>\r\n            <img src=\"https://static.thenounproject.com/png/28416-200.png\" alt=\"bank\"/>\r\n            <h1>Bank of React</h1>\r\n            </div>\r\n            <div className=\"\">\r\n            <ul>\r\n                <li><Link to=\"/userProfile\">User Profile</Link></li>\r\n                <li><Link to=\"/Login\">Login</Link></li>\r\n                <li><Link to=\"/Debits\">Debits</Link></li>\r\n                <li><Link to=\"/Credits\">Credits</Link></li>\r\n            </ul>\r\n            </div>\r\n            <br /><br />\r\n            <AccountBalance accountBalance={this.props.accountBalance}/>\r\n            \r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport AccountBalance from './AccountBalance';\r\nclass UserProfile extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h1>User Profile</h1>\r\n\r\n          <div>Username: {this.props.userName}</div>\r\n          <div>Member Since: {this.props.memberSince}</div>\r\n          <AccountBalance accountBalance={this.props.accountBalance}/>\r\n          <br/><br/>\r\n          <Link to=\"/\">Back to Homepage</Link>\r\n          \r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserProfile;","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport AccountBalance from './AccountBalance';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n  constructor () {\r\n    super()\r\n    this.state = {\r\n      user: {\r\n        userName: '',\r\n        password: ''\r\n      },\r\n      redirect: false\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const updatedUser = {...this.state.user}\r\n    const inputField = e.target.name\r\n    const inputValue = e.target.value\r\n    updatedUser[inputField] = inputValue\r\n\r\n    this.setState({user: updatedUser})\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    this.props.mockLogIn(this.state.user)\r\n    this.setState({redirect: true})\r\n  }\r\n\r\n  render () {\r\n    if (this.state.redirect) {\r\n      return (<Redirect to=\"/userProfile\"/>)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div >\r\n            <h1 className=\"\">Login</h1>\r\n            <Link to=\"/\">Back to Homepage</Link>\r\n        </div>\r\n        <br/>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div><p>\r\n            <label htmlFor=\"userName\">User Name: </label>\r\n            <input type=\"text\" name=\"userName\" \r\n                    onChange={this.handleChange} \r\n                    value={this.state.user.userName}/>\r\n          </p></div>\r\n          <div><p>\r\n            <label htmlFor=\"password\">Password: </label>\r\n            <input type=\"password\" name=\"password\" />\r\n            </p></div>\r\n          <button>Log In</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport AccountBalance from './AccountBalance';\r\n\r\nclass Debits extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            accountBalance: this.props.accountBalance,\r\n            debitData: this.props.debits,\r\n            newDebit: {\r\n                id: \"\",\r\n                description: \"\",\r\n                amount: \"\",\r\n                date: \"\",\r\n              },\r\n        }\r\n    }\r\n    handleInput=(e)=>{\r\n        const newRecordName = e.target.name;\r\n        const newRecordValue = e.target.value;\r\n        const newDebit = {...this.state.newCredit};\r\n        newDebit[newRecordName] = newRecordValue;\r\n        if (newRecordName === \"amount\") {\r\n            newDebit.amount = Number(newRecordValue);\r\n         }\r\n        this.setState({newDebit})\r\n       }\r\n   \r\n    addDebit = (e) => {\r\n        e.preventDefault();  \r\n        this.props.addDebitInfo(this.state.newDebit);\r\n    };\r\n\r\n    render() {\r\n        let display = (\r\n            this.props.debitArray.map((debitInfo) => {\r\n                return (\r\n                <div className=\"DebitResult\">\r\n                    <div>{debitInfo.description}</div>\r\n                    <div>Amount: $ {debitInfo.amount}</div>\r\n                    <div>Date: {debitInfo.date}</div>\r\n                    <br />\r\n                </div>\r\n                );\r\n            })\r\n        )\r\n        return (\r\n            <div className=\"Credit\">\r\n\r\n                <h1>Debits Account</h1>\r\n                <AccountBalance accountBalance={this.props.accountBalance}/>\r\n                <p>Total Debit: ${this.props.debitAmount} </p>\r\n                <Link to=\"/\">Back to Homepage</Link>\r\n                <div>\r\n                    <h3>Add Debit Record</h3>\r\n                    <p><label>Description:</label>\r\n                    <input type=\"text\" name=\"description\" onChange={this.handleInput}/>{\"  \"}\r\n                    <label>Debit Amount:</label>\r\n                    <input type=\"number\" name=\"amount\" onChange={this.handleInput}/>{\"  \"}\r\n                    <button onClick={this.addDebit}>Add</button></p>\r\n                </div>\r\n                \r\n                <br />\r\n                <div className=\"result\">\r\n                    <h2>Debit Record</h2>     \r\n                    {display}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Debits","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport AccountBalance from './AccountBalance';\r\n\r\nclass Credits extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            accountBalance: this.props.accountBalance,\r\n        //   creditAmount: this.props.creditAmount,\r\n            creditArray: this.props.creditArray,\r\n            newCredit:{\r\n                id: \"\",\r\n                description: \"\",\r\n                amount: \"\",\r\n                date: \"\",\r\n              },\r\n        }\r\n    }\r\n\r\n    handleInput=(e)=>{\r\n     const newRecordName = e.target.name;\r\n     const newRecordValue = e.target.value;\r\n     const newCredit = {...this.state.newCredit};\r\n     newCredit[newRecordName] = newRecordValue;\r\n     if (newRecordName === \"amount\") {\r\n        newCredit.amount = Number(newRecordValue);\r\n      }\r\n     this.setState({newCredit})\r\n    }\r\n\r\n    addCredit = (e) => {\r\n        e.preventDefault();  \r\n        this.props.addCreditInfo(this.state.newCredit);\r\n    };\r\n    \r\n    render() {\r\n        let display = (\r\n            this.props.creditArray.map((creditInfo) => {\r\n                return (\r\n                <div className=\"CreditResult\">\r\n                    <div>{creditInfo.description}</div>\r\n                    <div>Amount: $ {creditInfo.amount}</div>\r\n                    <div>Date: {creditInfo.date}</div>\r\n                    <br />\r\n                </div> \r\n\r\n                );\r\n            })\r\n        )\r\n        return (\r\n            <div className=\"Credit\">\r\n\r\n                <h1>Credits Account</h1>\r\n                <AccountBalance accountBalance={this.props.accountBalance}/>\r\n                <p>Total Credit: ${this.props.creditAmount} </p>\r\n                <Link to=\"/\">Back to Homepage</Link>\r\n                <div>\r\n                    <h3>Add Credit Record</h3>\r\n                    <p><label>Description:</label>\r\n                    <input type=\"text\" name=\"description\" onChange={this.handleInput}/>{\"  \"}\r\n                    <label>Credit Amount:</label>\r\n                    <input type=\"number\" name=\"amount\" onChange={this.handleInput}/>{\"  \"}\r\n                    <button onClick={this.addCredit}>Add</button></p>\r\n                </div>\r\n\r\n                <br />\r\n                <div className=\"result\">\r\n                    <h2>Credit Record</h2>     \r\n                    {display}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Credits","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport Login from \"./components/Login\";\nimport Debits from './components/Debits';\nimport Credits from './components/Credits';\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      accountBalance: 0,\n      debitArray: [],\n      debitAmount:0,\n      creditArray: [],\n      creditAmount:0,\n      currentUser: {\n        userName: 'bob_loblaw',\n        memberSince: '08/23/99',\n      }\n    }\n  }\n\n  mockLogIn = (logInInfo) => {\n    const newUser = {...this.state.currentUser}\n    newUser.userName = logInInfo.userName\n    this.setState({currentUser: newUser})\n  }\n\n  componentDidMount() {\n    //get debits information\n    axios\n    .get(\"https://moj-api.herokuapp.com/debits\")\n    .then((response) => {\n        const data = response.data;\n        console.log(data);\n        let debitMoney=0;\n        let total=0;\n        for (let key of data) {\n          debitMoney += key.amount;\n          total-=key.amount;\n        }\n        this.setState({\n          debitArray: data,\n          debitAmount:debitMoney.toFixed(2),\n          accountBalance:total.toFixed(2)\n        });\n    })\n    .catch((err) =>{ \n        console.log(err);\n        //this.setState({debitArray:[],});\n    })\n    //get credit information\n    axios\n    .get(\"https://moj-api.herokuapp.com/credits\")\n    .then((response) => {\n        const data = response.data;\n        console.log(data);\n        let creditMoney=0;\n        let total=Number(this.state.accountBalance);\n        for (let key of data) {\n          creditMoney += key.amount;\n          total +=key.amount;\n        }\n        this.setState({\n          creditArray: data,\n          creditAmount:creditMoney.toFixed(2),\n          accountBalance:total.toFixed(2)\n        });\n    })\n    .catch((err) =>{ \n        console.log(err);\n        // this.setState({creditArray:[]});\n    })\n  }\n\n  addDebitInfo=(debit)=>{\n    debit.id = Math.random().toString(36).slice(2);\n    debit.date = new Date().toISOString();\n    const newDebitA  = [debit,...this.state.debitArray];\n    let total=Number(this.state.accountBalance);\n    let debitMoney =Number(this.state.debitAmount);\n    debitMoney+=debit.amount;\n    total-=debit.amount;\n    this.setState({\n      debitArray: newDebitA,\n      debitAmount:debitMoney.toFixed(2),\n      accountBalance: total.toFixed(2)\n    });\n  }\n\n  addCreditInfo=(credit)=>{\n    credit.id = Math.random().toString(36).slice(2);\n    credit.date = new Date().toISOString();\n    const newCreditA  = [credit,...this.state.creditArray];\n    let total=Number(this.state.accountBalance);\n    let creditMoney =Number(this.state.creditAmount);\n    creditMoney+=credit.amount;\n    total+=credit.amount;\n    this.setState({\n      creditArray: newCreditA,\n      creditAmount:creditMoney.toFixed(2),\n      accountBalance: total.toFixed(2)\n    });   \n  } \n\n  render() {\n    const HomeComponent = ()=>(<Home accountBalance={this.state.accountBalance}/> )\n    const UserProfileComponent = () => (\n      <UserProfile \n      accountBalance={this.state.accountBalance}\n      userName={this.state.currentUser.userName} \n      memberSince={this.state.currentUser.memberSince}/>\n    );\n    const LoginComponent = () => (\n      <Login  \n      userName={this.state.currentUser}\n      mockLogIn={this.mockLogIn}{...this.props}/>\n    );\n    \n    const DebitsComponent = () => (\n    <Debits \n      accountBalance={this.state.accountBalance}\n      debitArray = {this.state.debitArray}\n      addDebitInfo = {this.addDebitInfo}\n      debitAmount = {this.state.debitAmount}\n      />\n    );\n\n    const CreditsComponen = () => (\n    <Credits \n      accountBalance={this.state.accountBalance}\n      creditArray = {this.state.creditArray}\n      addCreditInfo = {this.addCreditInfo}\n      creditAmount = {this.state.creditAmount}\n      />\n    );\n\n    return (\n      <div className=\"App\">\n      <Router>\n        <Switch>>\n          <Route exact path=\"/\" render={HomeComponent}/>\n          <Route exact path=\"/UserProfile\" render={UserProfileComponent}/>\n          <Route exact path=\"/Login\" render={LoginComponent} />\n          <Route exact path='/Debits' render={DebitsComponent} />\n          <Route exact path='/Credits' render={CreditsComponen} />\n        </Switch>\n      </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}